plugins {
    id 'java'
    id 'eclipse-wtp'
    id 'war'
}

repositories {
    jcenter()
}

dependencies {
    // providedCompile?
    // => 프로그래밍 하는 동안에만 사용하고 배치할 때는 제외하는 라이브러리를 가리킨다.
    
    // Servlet API 라이브러리
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'

    // JSTL 명세를 구현한 라이브러리
    compile group: 'javax.servlet', name: 'jstl', version: '1.2'

    // Spring WebMVC 프레임워크 라이브러리
    compile group: 'org.springframework', name: 'spring-webmvc', version: '5.1.6.RELEASE'

    // AOP 관련 라이브러리
    compile group: 'org.aspectj', name: 'aspectjweaver', version: '1.9.2'

    // log4j 2.x 라이브러리
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'

    // JSON 형식을 다루는 라이브러리
    // @Controller가 붙은 일반적인 페이지 컨트롤러의 요청 핸들러를 실행할 때
    // 요청 파라미터의 문자열을 int나 boolean 등으로 바꾸기 위해
    // 기본으로 장착된 변환기를 사용한다.
    // 그 변환기는 HttpMessageConverter 규칙에 따라 만든 변환기이다.
    // 
    // 그런데 어떤 타입의 리턴 값을 문자열로 만들어 클라이언트로 출력할 때도 
    // 이 HttpMessageConverter를 사용한다.
    // 즉 클라인트가 보낸 파라미터 값을 핸들러의 아규먼트 타입으로 바꿀 때도 이 변환기를 사용하고
    // 핸들러의 리턴 값을 클라이언트로 보내기 위해 문자열로 바꿀 때도 이 변환기를 사용한다. 
    // 
    // 스프링이 사용하는 기본 데이터 변환기는 MappingJackson2HttpMessageConverter 이다.
    // 만약 이 변환기가 없다면 Google의 Gson 변환기를 사용한다.
    // 구글의 Gson 변환기 마저 없다면 컨버터가 없다는 예외를 발생시킨다.
    // 컨버터가 하는 일은 JSON 데이터로 변환하는 것이다.
    //      클라이언트가 보낸 JSON 요청 파라미터 ===> 자바 객체
    //      핸들러가 리턴하는 자바 객체 ===> JSON 형식의 문자열
    //
    // MappingJackson2HttpMessageConverter?
    // => 요청 파라미터로 JSON 문자열을 받으면 요청 핸들러를 호출할 때 자바 객체로 변환시킨다.
    // => 요청 핸들러가 자바 객체를 리턴할 때 JSON 문자열로 변환한다.
    //
    // 주의!
    // => MappingJackson2HttpMessageConverter를 사용하려면 
    //    다음과 같이 의존하는 라이브러리를 추가해야 한다.
    // 
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.8'
    
    // => 그런데 JSON 데이터를 처리할 때
    //    MappingJackson2HttpMessageConverter 대신 GsonHttpMessageConverter 를 사용할 수 있다.
    //    단 GsonHttpMessageConverter를 사용하려면 
    //    다음과 같이 이 클래스가 들어있는 의존 라이브러리를 추가해야 한다.
    // => 만약 동시에 추가한다면 기본으로 Jackson 라이브러리를 사용한다. 
    // 
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    
    implementation 'com.google.guava:guava:27.0.1-jre'

    testImplementation 'junit:junit:4.12'
}
