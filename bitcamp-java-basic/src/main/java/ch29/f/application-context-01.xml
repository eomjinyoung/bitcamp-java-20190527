<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
  
  <!-- CarFactory 객체를 생성하기 
      => Car 객체를 만들기 위해 이와 같이 굳이 CarFactory 객체를 생성할 필요가 없다.
      => create() 메서드는 static 이기 때문이다.
  -->
  <bean id="factory" class="ch29.f.CarFactory"/>
  
  <!-- 팩토리 클래스로부터 객체를 생성하기
     class : 팩토리 클래스 이름
     factory-method : 호출될 스태틱 메서드 이름
     id : 팩토리 메서드가 리턴한 값을 저장할 때 사용할 객체 이름
     => 주의!
        id로 저장되는 객체는 팩토리 객체가 아니라 팩토리 메서드가 리턴한 값이다.
  -->
  
  <bean id="c1" class="ch29.f.CarFactory" factory-method="create">
    <!-- 팩토리 메서드를 호출할 때 넘겨줘야 하는 파라미터 값은 생성자 파라미터 태그를 그대로 쓴다. -->
    <constructor-arg value="equus"/>
  </bean>
  
  <!-- 자바 코드로 표현해보면 다음과 같다.
       Car obj = CarFactory.create("equus");
       beanContainer.put("c1", obj); -->
  
  <!-- java.sql.Date 객체 만들기 
       Date.valueOf() 의 리턴 값이 d1 이름으로 저장된다.
  -->
  <bean id="d1" class="java.sql.Date" factory-method="valueOf">
    <constructor-arg value="2019-3-19"/>
  </bean>
  <!-- 
    Object obj = Data.valueOf("2019-3-19");
    beanContainer.put("d1", obj);
   -->
</beans>

















